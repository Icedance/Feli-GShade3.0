//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   bool bADOF_AutofocusEnable;        // Offset:    0 Size:     4 [unused]
//   float2 fADOF_AutofocusCenter;      // Offset:    4 Size:     8 [unused]
//   float fADOF_AutofocusRadius;       // Offset:   12 Size:     4 [unused]
//   float fADOF_AutofocusSpeed;        // Offset:   16 Size:     4 [unused]
//   float fADOF_ManualfocusDepth;      // Offset:   20 Size:     4 [unused]
//   float fADOF_NearBlurCurve;         // Offset:   24 Size:     4 [unused]
//   float fADOF_FarBlurCurve;          // Offset:   28 Size:     4 [unused]
//   float fADOF_HyperFocus;            // Offset:   32 Size:     4 [unused]
//   float fADOF_RenderResolutionMult;  // Offset:   36 Size:     4 [unused]
//   float fADOF_ShapeRadius;           // Offset:   40 Size:     4
//   float fADOF_SmootheningAmount;     // Offset:   44 Size:     4 [unused]
//   float fADOF_BokehIntensity;        // Offset:   48 Size:     4
//   int iADOF_BokehMode;               // Offset:   52 Size:     4
//   int iADOF_ShapeVertices;           // Offset:   56 Size:     4
//   int iADOF_ShapeQuality;            // Offset:   60 Size:     4
//   float fADOF_ShapeCurvatureAmount;  // Offset:   64 Size:     4
//   float fADOF_ShapeRotation;         // Offset:   68 Size:     4 [unused]
//   float fADOF_ShapeAnamorphRatio;    // Offset:   72 Size:     4
//   float fADOF_ShapeChromaAmount;     // Offset:   76 Size:     4 [unused]
//   int iADOF_ShapeChromaMode;         // Offset:   80 Size:     4 [unused]
//   float FRAME_TIME;                  // Offset:   84 Size:     4 [unused]
//   int FRAME_COUNT;                   // Offset:   88 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// V__CommonTex0                     texture  float4          2d             t8      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float     zw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xy          3     NONE   float   xy  
// TEXCOORD                 3   xy          4     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[5], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t8
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xy
dcl_input_ps linear v4.xy
dcl_output o0.xyzw
dcl_temps 16
max r0.x, v1.w, v1.z
lt r0.x, l(1.010000), r0.x
if_nz r0.x
  discard_nz l(-1)
  mov o0.xyzw, l(0,0,0,0)
  ret 
endif 
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.zwzz, t8.xyzw, s0
mad r1.x, r0.w, l(2.000000), l(-1.000000)
mul r1.y, |r1.x|, cb0[4].z
mul r2.x, r1.y, cb0[2].z
lt r1.y, r2.x, l(0.217014)
if_nz r1.y
  mov o0.xyzw, r0.xyzw
  ret 
endif 
mul r2.z, |r1.x|, cb0[2].z
mul r1.yz, r2.xxzx, l(0.000000, 0.000600, 0.001067, 0.000000)
min r1.w, |r1.x|, l(1.000000)
itof r2.x, cb0[3].w
add r2.x, r2.x, l(-1.000000)
mad r1.w, r1.w, r2.x, l(1.000000)
dp2 r2.x, v0.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
add r2.y, r2.x, r2.x
ge r2.y, r2.y, -r2.y
movc r2.yz, r2.yyyy, l(0,2.000000,0.500000,0), l(0,-2.000000,-0.500000,0)
mul r2.x, r2.z, r2.x
frc r2.x, r2.x
mul r2.x, r2.x, r2.y
mad r1.w, r2.x, l(0.500000), r1.w
div r1.yz, r1.yyzy, r1.wwww
div r2.x, |r1.x|, r1.w
ilt r2.y, l(0), cb0[3].z
ge r2.z, r1.w, l(1.000000)
add r2.w, -cb0[4].x, l(1.000000)
mov r3.xyzw, r0.xyzw
mov r4.xyz, r0.xyzx
mov r5.xyzw, v2.xyzw
mov r6.w, r0.w
mov r4.w, l(1.000000)
mov r7.x, l(0)
mov r7.y, r2.y
loop 
  breakc_z r7.y
  add r7.zw, -r5.xxxy, r5.zzzw
  mov r8.xyzw, r3.xyzw
  mov r9.xyz, r4.xyzx
  mov r9.w, r6.w
  mov r10.x, r4.w
  mov r10.y, l(1.000000)
  mov r10.z, r2.z
  loop 
    breakc_z r10.z
    lt r10.w, l(0.000000), r10.y
    mul r11.xy, r1.yzyy, r10.yyyy
    mov r12.xyzw, r8.xyzw
    mov r13.xyzw, r9.xyzw
    mov r11.z, r10.x
    mov r11.w, l(0)
    mov r14.x, r10.w
    loop 
      breakc_z r14.x
      div r14.y, r11.w, r10.y
      mad r14.yz, r14.yyyy, r7.zzwz, r5.xxyx
      dp2 r14.w, r14.yzyy, r14.yzyy
      rsq r14.w, r14.w
      mad r14.w, r14.w, cb0[4].x, r2.w
      mul r14.yz, r14.wwww, r14.yyzy
      mad r14.yz, r14.yyzy, r11.xxyx, v1.zzwz
      sample_l_indexable(texture2d)(float,float,float,float) r15.xyzw, r14.yzyy, t8.xyzw, s0, l(0.000000)
      mad r14.y, r15.w, l(2.000000), l(-1.000000)
      mad r14.y, -r2.x, r10.y, |r14.y|
      mad_sat r14.y, r14.y, l(1000000.000000), l(1.000000)
      mul r15.xyz, r14.yyyy, r15.xyzx
      add r11.z, r11.z, r14.y
      add r12.xyzw, r12.xyzw, r15.xyzw
      max r13.xyzw, r15.xyzw, r13.xyzw
      add r11.w, r11.w, l(1.000000)
      lt r14.y, r11.w, r10.y
      lt r14.z, r11.w, l(26.000000)
      and r14.x, r14.z, r14.y
    endloop 
    mov r8.xyzw, r12.xyzw
    mov r9.xyzw, r13.xyzw
    mov r10.x, r11.z
    add r10.y, r10.y, l(1.000000)
    ge r10.w, r1.w, r10.y
    lt r11.x, r10.y, l(26.000000)
    and r10.z, r10.w, r11.x
  endloop 
  mov r3.xyzw, r8.xyzw
  mov r4.xyz, r9.xyzx
  mov r6.w, r9.w
  mov r4.w, r10.x
  dp2 r11.x, r5.zwzz, v3.xyxx
  dp2 r11.y, r5.zwzz, v4.xyxx
  iadd r7.x, r7.x, l(1)
  ilt r7.z, r7.x, cb0[3].z
  ilt r7.w, r7.x, l(10)
  and r7.y, r7.w, r7.z
  mov r5.xy, r5.zwzz
  mov r5.zw, r11.xxxy
endloop 
div r0.xyzw, r3.xyzw, r4.wwww
mov_sat r2.yzw, r0.xxyz
add r2.yzw, -r2.yyzw, l(0.000000, 1.200000, 1.200000, 1.200000)
rcp r2.yzw, r2.yyzw
mul r0.xyz, r0.xyzx, r2.yzwy
mov_sat r2.yzw, r4.xxyz
add r2.yzw, -r2.yyzw, l(0.000000, 1.200000, 1.200000, 1.200000)
rcp r2.yzw, r2.yyzw
mul r6.xyz, r2.yzwy, r4.xyzx
if_z cb0[3].y
  add r1.y, |r1.x|, |r1.x|
  min r1.y, r1.y, l(1.000000)
  mul r1.y, r1.y, cb0[3].x
  add r3.xyzw, -r0.xyzw, r6.xyzw
  mad r3.xyzw, r1.yyyy, r3.xyzw, r0.xyzw
  mov o0.w, r3.w
else 
  dp3 r1.y, l(0.300000, 0.590000, 0.110000, 0.000000), r6.xyzx
  dp3 r1.z, l(0.300000, 0.590000, 0.110000, 0.000000), r0.xyzx
  add r1.x, |r1.x|, |r1.x|
  min r1.x, r1.x, l(1.000000)
  mul r1.x, r1.x, cb0[3].x
  add r1.y, -r1.z, r1.y
  mad r1.x, r1.x, r1.y, r1.z
  mul r4.xyzw, r1.xxxx, r0.xyzw
  div r4.xyzw, r4.xyzw, r1.zzzz
  max r1.x, r1.y, l(0.000000)
  dp2 r1.x, r1.xxxx, cb0[3].xxxx
  mul r1.x, r1.x, r1.x
  mul r1.x, r2.x, r1.x
  mul_sat r1.x, r1.w, r1.x
  mad r5.xyzw, r6.xyzw, r1.xxxx, r0.xyzw
  ieq r2.yzw, cb0[3].yyyy, l(0, 1, 2, 3)
  mul r1.x, r2.x, r1.y
  mul r1.x, r1.w, r1.x
  mul_sat r1.x, r1.x, cb0[3].x
  add r6.xyzw, -r0.xyzw, r6.xyzw
  mad r0.xyzw, r1.xxxx, r6.xyzw, r0.xyzw
  and r0.xyzw, r0.xyzw, r2.wwww
  movc r0.xyzw, r2.zzzz, r5.xyzw, r0.xyzw
  movc r3.xyzw, r2.yyyy, r4.xyzw, r0.xyzw
  mov o0.w, r3.w
endif 
mul r0.xyz, r3.xyzx, l(1.200000, 1.200000, 1.200000, 0.000000)
add r1.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
rcp r1.xyz, r1.xyzx
mul o0.xyz, r0.xyzx, r1.xyzx
ret 
// Approximately 151 instruction slots used
