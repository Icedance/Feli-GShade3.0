//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float Range;                       // Offset:    0 Size:     4
//   int Iterations;                    // Offset:    4 Size:     4
//   float custom_avgdiff;              // Offset:    8 Size:     4
//   float custom_maxdiff;              // Offset:   12 Size:     4
//   float custom_middiff;              // Offset:   16 Size:     4
//   int drandom;                       // Offset:   20 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// V__ReShade__BackBufferTex         texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 11
sample_l_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0, l(0.000000)
mul r1.xy, cb0[0].zwzz, l(0.003922, 0.003922, 0.000000, 0.000000)
mul r0.w, cb0[1].x, l(0.003922)
mad r1.z, v1.x, l(34.000000), l(1.000000)
mul r1.z, r1.z, v1.x
mul r1.w, r1.z, l(289.000000)
ge r1.w, r1.w, -r1.w
movc r2.xy, r1.wwww, l(289.000000,0.003460,0,0), l(-289.000000,-0.003460,0,0)
mul r1.z, r1.z, r2.y
frc r1.z, r1.z
mad r1.z, r2.x, r1.z, v1.y
mad r1.w, r1.z, l(34.000000), l(1.000000)
mul r1.z, r1.z, r1.w
mul r1.w, r1.z, l(289.000000)
ge r1.w, r1.w, -r1.w
movc r2.xy, r1.wwww, l(289.000000,0.003460,0,0), l(-289.000000,-0.003460,0,0)
mul r1.z, r1.z, r2.y
frc r1.z, r1.z
itof r1.w, cb0[1].y
mul r1.w, r1.w, l(0.000031)
mad r1.z, r2.x, r1.z, r1.w
mad r1.w, r1.z, l(34.000000), l(1.000000)
mul r1.z, r1.z, r1.w
mul r1.w, r1.z, l(289.000000)
ge r1.w, r1.w, -r1.w
movc r2.xy, r1.wwww, l(289.000000,0.003460,0,0), l(-289.000000,-0.003460,0,0)
mul r1.z, r1.z, r2.y
frc r1.z, r1.z
mul r1.z, r1.z, r2.x
mad r1.w, r1.z, l(34.000000), l(1.000000)
mul r1.w, r1.z, r1.w
mul r2.x, r1.w, l(289.000000)
ge r2.x, r2.x, -r2.x
movc r2.xy, r2.xxxx, l(289.000000,0.003460,0,0), l(-289.000000,-0.003460,0,0)
mul r1.w, r1.w, r2.y
frc r1.w, r1.w
mul r1.w, r1.w, r2.x
mul r1.w, r1.w, l(0.024390)
frc r1.w, r1.w
mul r1.w, r1.w, l(6.283185)
sincos r2.x, r3.x, r1.w
ige r1.w, cb0[0].y, l(1)
mov r3.y, r2.x
mov r3.zw, -r3.yyyx
mov r2.xyz, l(0,0,0,0)
mov r4.y, l(1)
mov r4.xz, r1.zzwz
loop 
  breakc_z r4.z
  mul r4.w, r4.x, l(0.024390)
  frc r4.w, r4.w
  mul r4.w, r4.w, cb0[0].x
  itof r5.x, r4.y
  mul r4.w, r4.w, r5.x
  mul r5.yz, r4.wwww, l(0.000000, 0.000391, 0.000694, 0.000000)
  mad r6.xyzw, r5.yzyz, r3.xyzx, v1.xyxy
  sample_l_indexable(texture2d)(float,float,float,float) r7.xyz, r6.xyxx, t0.xyzw, s0, l(0.000000)
  add r8.xyz, r0.xyzx, -r7.xyzx
  mad r6.xy, r5.yzyy, -r3.xyxx, v1.xyxx
  sample_l_indexable(texture2d)(float,float,float,float) r9.xyz, r6.xyxx, t0.xyzw, s0, l(0.000000)
  add r10.xyz, r0.xyzx, -r9.xyzx
  max r8.xyz, |r8.xyzx|, |r10.xyzx|
  add r7.xyz, r7.xyzx, r9.xyzx
  mad r9.xyz, r7.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -r0.xyzx
  sample_l_indexable(texture2d)(float,float,float,float) r6.xyz, r6.zwzz, t0.xyzw, s0, l(0.000000)
  add r10.xyz, r0.xyzx, -r6.xyzx
  max r8.xyz, r8.xyzx, |r10.xyzx|
  add r7.xyz, r6.xyzx, r7.xyzx
  mad r5.yz, r5.yyzy, r3.yywy, v1.xxyx
  sample_l_indexable(texture2d)(float,float,float,float) r5.yzw, r5.yzyy, t0.wxyz, s0, l(0.000000)
  add r10.xyz, r0.xyzx, -r5.yzwy
  max r8.xyz, r8.xyzx, |r10.xyzx|
  add r7.xyz, r5.yzwy, r7.xyzx
  add r5.yzw, r5.yyzw, r6.xxyz
  mad r5.yzw, r5.yyzw, l(0.000000, 0.500000, 0.500000, 0.500000), -r0.xxyz
  mad r6.xyz, -r7.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000), r0.xyzx
  mul r10.xy, r1.xyxx, r5.xxxx
  mul r4.w, r0.w, r5.x
  div r6.xyz, |r6.xyzx|, r10.xxxx
  add r6.xyz, -r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul_sat r6.xyz, r6.xyzx, l(3.000000, 3.000000, 3.000000, 0.000000)
  div r8.xyz, r8.xyzx, r10.yyyy
  add r8.xyz, -r8.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul_sat r8.xyz, r8.xyzx, l(3.000000, 3.000000, 3.000000, 0.000000)
  mul r6.xyz, r6.xyzx, r8.xyzx
  div r8.xyz, |r9.xyzx|, r4.wwww
  add r8.xyz, -r8.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul_sat r8.xyz, r8.xyzx, l(3.000000, 3.000000, 3.000000, 0.000000)
  mul r6.xyz, r6.xyzx, r8.xyzx
  div r5.xyz, |r5.yzwy|, r4.wwww
  add r5.xyz, -r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul_sat r5.xyz, r5.xyzx, l(3.000000, 3.000000, 3.000000, 0.000000)
  mul r5.xyz, r5.xyzx, r6.xyzx
  log r5.xyz, r5.xyzx
  mul r5.xyz, r5.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000)
  exp r5.xyz, r5.xyzx
  mad r6.xyz, r7.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000), -r0.xyzx
  mad r2.xyz, r5.xyzx, r6.xyzx, r0.xyzx
  mad r4.w, r4.x, l(34.000000), l(1.000000)
  mul r4.w, r4.x, r4.w
  mul r5.x, r4.w, l(289.000000)
  ge r5.x, r5.x, -r5.x
  movc r5.xy, r5.xxxx, l(289.000000,0.003460,0,0), l(-289.000000,-0.003460,0,0)
  mul r4.w, r4.w, r5.y
  frc r4.w, r4.w
  mul r4.x, r4.w, r5.x
  iadd r4.y, r4.y, l(1)
  ige r4.z, cb0[0].y, r4.y
endloop 
dp2 r0.x, v1.xyxx, l(160.250000, 400.250031, 0.000000, 0.000000)
frc r0.x, r0.x
mov r2.w, l(0.001961)
mad r0.xyz, r0.xxxx, l(-0.003922, 0.003922, -0.003922, 0.000000), r2.wyww
mov r2.y, l(-0.001961)
add o0.xyz, r0.xyzx, r2.xyzx
ret 
// Approximately 116 instruction slots used
