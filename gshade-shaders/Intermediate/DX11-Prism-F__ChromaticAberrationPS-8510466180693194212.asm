//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int Aberration;                    // Offset:    0 Size:     4
//   float Curve;                       // Offset:    4 Size:     4
//   bool Automatic;                    // Offset:    8 Size:     4
//   int SampleCount;                   // Offset:   12 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s1                              sampler      NA          NA             s1      1 
// V__ReShade__BackBufferTex         texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 6
mad r0.xy, v1.xyxx, l(1.777778, 1.000000, 0.000000, 0.000000), l(-0.888889, -0.500000, 0.000000, 0.000000)
dp2 r0.z, r0.xyxx, r0.xyxx
sqrt r0.z, r0.z
mul r0.z, r0.z, l(0.980522)
log r0.z, r0.z
mul r0.z, r0.z, cb0[0].y
exp r0.z, r0.z
itof r0.w, cb0[0].x
mul r0.z, r0.w, r0.z
mul r0.z, r0.z, l(0.001389)
lt r0.w, |r0.z|, l(0.000694)
if_nz r0.w
  sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t0.xyzw, s1
  mov o0.xyz, r1.xyzx
else 
  imax r0.w, -cb0[0].x, cb0[0].x
  itof r0.w, r0.w
  mul r0.w, r0.w, l(0.500000)
  round_pi r0.w, r0.w
  mad r0.w, r0.w, l(2.000000), l(2.000000)
  max r0.w, r0.w, l(6.000000)
  min r0.w, r0.w, l(48.000000)
  itof r1.x, cb0[0].w
  mul r1.x, r1.x, l(0.500000)
  round_ni r1.x, r1.x
  add r1.x, r1.x, r1.x
  movc r0.w, cb0[0].z, r0.w, r1.x
  div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
  lt r1.y, l(0.000000), r0.w
  mov r2.xyz, l(0,0,0,0)
  mov r1.z, l(0)
  mov r1.w, r1.y
  loop 
    breakc_z r1.w
    mul r2.w, r1.x, r1.z
    mad r3.x, r1.z, r1.x, l(-0.500000)
    mad r3.x, r0.z, r3.x, l(1.000000)
    div r3.xy, r0.xyxx, r3.xxxx
    mul r3.z, r3.x, l(0.562500)
    add r3.xy, r3.zyzz, l(0.500000, 0.500000, 0.000000, 0.000000)
    mad r4.xyz, r2.wwww, l(4.000000, 4.000000, 4.000000, 0.000000), l(-3.500000, -1.000000, -2.000000, 0.000000)
    add_sat r5.yz, -|r4.yyzy|, l(0.000000, 1.500000, 1.500000, 0.000000)
    mov_sat r4.x, r4.x
    add r5.x, r4.x, r5.y
    sample_l_indexable(texture2d)(float,float,float,float) r3.xyz, r3.xyxx, t0.xyzw, s1, l(0.000000)
    add r5.w, -r5.x, l(1.000000)
    mad r2.xyz, r5.xzwx, r3.xyzx, r2.xyzx
    add r1.z, r1.z, l(1.000000)
    lt r1.w, r1.z, r0.w
  endloop 
  add r0.x, r1.x, r1.x
  mul o0.xyz, r0.xxxx, r2.xyzx
endif 
ret 
// Approximately 54 instruction slots used
